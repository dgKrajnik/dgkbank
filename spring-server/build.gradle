buildscript {
    ext.spring_boot_version = '1.5.7.RELEASE'
    ext.spring_version = '4.3.11.RELEASE'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"
    compile project(":cordapp-contracts-states")
    compile project(":cordapp")

    // Corda integration dependencies
    compile "net.corda:corda-core:$corda_release_version"
    compile "net.corda:corda-finance:$corda_release_version"
    compile "net.corda:corda-jackson:$corda_release_version"
    compile "net.corda:corda-rpc:$corda_release_version"
    runtime "net.corda:corda:$corda_release_version"
    testCompile "net.corda:corda-node-driver:$corda_release_version"

    compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile "org.springframework.boot:spring-boot-starter-log4j2:$spring_boot_version"
    compile "org.apache.logging.log4j:log4j-web:2.7"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task runBODServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.dgkrajnik.bank.server.ServerKt'
    environment "server.port", "8080"
}

task runBCSServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.dgkrajnik.bank.server.ServerKt'
    environment "server.port", "8081"
}